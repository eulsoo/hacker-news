{"remainingRequest":"/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/node_modules/babel-loader/lib/index.js!/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/node_modules/eslint-loader/index.js??ref--13-0!/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/src/store/index.js","dependencies":[{"path":"/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/src/store/index.js","mtime":1576228141966},{"path":"/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKaW1wb3J0IHsgZmV0Y2hMaXN0SXRlbSwgZmV0Y2hVc2VySW5mbywgZmV0Y2hBc2tJdGVtIH0gZnJvbSAiLi4vYXBpL2luZGV4LmpzIjsKVnVlLnVzZShWdWV4KTsKZXhwb3J0IHZhciBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHsKICBzdGF0ZTogewogICAgLy8g642w7J207YSwIOyggOyepe2VmOuKlCDsnbwKICAgIHVzZXI6IFtdLAogICAgaXRlbToge30sCiAgICBsaXN0OiBbXQogIH0sCiAgZ2V0dGVyczogey8vIOqwgSDtjpjsnbTsp4Dsl5DshJwg7ZWo7IiY66GcIO2YuOy2nO2VtCDqsIDsoLjqsIgg7IiYIOyeiOuPhOuhnSDsp4Tsl7TtlbQg65GgCiAgICAvLyBuZXdzKHN0YXRlKSB7CiAgICAvLyAgICAgcmV0dXJuIHN0YXRlLm5ld3M7CiAgICAvLyB9LAogICAgLy8gYXNrKHN0YXRlKSB7CiAgICAvLyAgICAgcmV0dXJuIHN0YXRlLmFzazsKICAgIC8vIH0sCiAgICAvLyBqb2JzKHN0YXRlKSB7CiAgICAvLyAgICAgcmV0dXJuIHN0YXRlLmpvYnM7CiAgICAvLyB9LAogICAgLy8gdXNlcihzdGF0ZSkgewogICAgLy8gICAgIHJldHVybiBzdGF0ZS51c2VyOwogICAgLy8gfSwKICAgIC8vIGl0ZW0oc3RhdGUpIHsKICAgIC8vICAgICByZXR1cm4gc3RhdGUuaXRlbTsKICAgIC8vIH0KICB9LAogIG11dGF0aW9uczogewogICAgLy8gc3RhdGXsl5Ag7KCA7J6lCiAgICBTRVRfVVNFUjogZnVuY3Rpb24gU0VUX1VTRVIoc3RhdGUsIHVzZXIpIHsKICAgICAgc3RhdGUudXNlciA9IHVzZXI7CiAgICB9LAogICAgU0VUX0lURU06IGZ1bmN0aW9uIFNFVF9JVEVNKHN0YXRlLCBpdGVtKSB7CiAgICAgIHN0YXRlLml0ZW0gPSBpdGVtOwogICAgfSwKICAgIFNFVF9MSVNUOiBmdW5jdGlvbiBTRVRfTElTVChzdGF0ZSwgbGlzdCkgewogICAgICBzdGF0ZS5saXN0ID0gbGlzdDsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIC8vIGFwaS9pbmRleC5qc+yXkCDrjbDsnbTthLAg6rCA7KC47Jik64qUIO2WieuPmeuMgOyepeuTpOydhCDtmLjstpztlbTshJwg67Cb6rOgLCDrrqTthYzsnbTshZjsl5Ag64SY6rmACiAgICBGRVRDSF9VU0VSOiBmdW5jdGlvbiBGRVRDSF9VU0VSKGNvbnRleHQsIHVzZXJOYW1lKSB7CiAgICAgIHZhciByZXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gRkVUQ0hfVVNFUiQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChmZXRjaFVzZXJJbmZvKHVzZXJOYW1lKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgnU0VUX1VTRVInLCByZXMuZGF0YSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIG51bGwsIFtbMCwgOF1dKTsKICAgIH0sCiAgICBGRVRDSF9JVEVNOiBmdW5jdGlvbiBGRVRDSF9JVEVNKGNvbnRleHQsIGFza0lkKSB7CiAgICAgIHZhciByZXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gRkVUQ0hfSVRFTSQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGZldGNoQXNrSXRlbShhc2tJZCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCdTRVRfSVRFTScsIHJlcy5kYXRhKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDg7CiAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0Mi50MCk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgbnVsbCwgbnVsbCwgW1swLCA4XV0pOwogICAgfSwKICAgIC8vIHByb21pc2Ug67Cp7IudCiAgICAvLyBGRVRDSF9MSVNUKGNvbnRleHQsIHBhZ2VOYW1lKSB7CiAgICAvLyAgICAgcmV0dXJuIGZldGNoTGlzdEl0ZW0ocGFnZU5hbWUpCiAgICAvLyAgICAgICAgIC50aGVuKHJlcyA9PiB7CiAgICAvLyAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgnU0VUX0xJU1QnLCByZXMuZGF0YSk7CiAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyg0KTsKICAgIC8vICAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAvLyAgICAgICAgIH0pCiAgICAvLyAgICAgICAgIC5jYXRjaChlcnIgPT4gewogICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgIC8vICAgICAgICAgfSkKICAgIC8vIH0sCiAgICBGRVRDSF9MSVNUOiBmdW5jdGlvbiBGRVRDSF9MSVNUKGNvbnRleHQsIHBhZ2VOYW1lKSB7CiAgICAgIHZhciByZXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gRkVUQ0hfTElTVCQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGZldGNoTGlzdEl0ZW0ocGFnZU5hbWUpKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCgnU0VUX0xJU1QnLCByZXMuZGF0YSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSA4OwogICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgwKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDMudDApOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIG51bGwsIFtbMCwgOF1dKTsKICAgIH0KICB9Cn0pOw=="},{"version":3,"sources":["/Users/eulsoo/Dropbox/github/vue_study/12_vue-hacker-news/vue-news/src/store/index.js"],"names":["Vue","Vuex","fetchListItem","fetchUserInfo","fetchAskItem","use","store","Store","state","user","item","list","getters","mutations","SET_USER","SET_ITEM","SET_LIST","actions","FETCH_USER","context","userName","res","commit","data","console","log","FETCH_ITEM","askId","FETCH_LIST","pageName"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,YAAvC;AAEAJ,GAAG,CAACK,GAAJ,CAAQJ,IAAR;AAEA,OAAO,IAAMK,KAAK,GAAG,IAAIL,IAAI,CAACM,KAAT,CAAe;AAChCC,EAAAA,KAAK,EAAE;AAAE;AACLC,IAAAA,IAAI,EAAE,EADH;AAEHC,IAAAA,IAAI,EAAE,EAFH;AAGHC,IAAAA,IAAI,EAAC;AAHF,GADyB;AAMhCC,EAAAA,OAAO,EAAE,CAAE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfK,GANuB;AAuBhCC,EAAAA,SAAS,EAAE;AAAE;AACTC,IAAAA,QADO,oBACEN,KADF,EACSC,IADT,EACe;AAClBD,MAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AACH,KAHM;AAIPM,IAAAA,QAJO,oBAIEP,KAJF,EAISE,IAJT,EAIe;AAClBF,MAAAA,KAAK,CAACE,IAAN,GAAaA,IAAb;AACH,KANM;AAOPM,IAAAA,QAPO,oBAOER,KAPF,EAOSG,IAPT,EAOe;AAClBH,MAAAA,KAAK,CAACG,IAAN,GAAaA,IAAb;AACH;AATM,GAvBqB;AAkChCM,EAAAA,OAAO,EAAE;AAAE;AACDC,IAAAA,UADD,sBACYC,OADZ,EACqBC,QADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAGqBjB,aAAa,CAACiB,QAAD,CAHlC;;AAAA;AAGSC,cAAAA,GAHT;AAIGF,cAAAA,OAAO,CAACG,MAAR,CAAe,UAAf,EAA2BD,GAAG,CAACE,IAA/B;AAJH,+CAKUF,GALV;;AAAA;AAAA;AAAA;AAOGG,cAAAA,OAAO,CAACC,GAAR;;AAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUCC,IAAAA,UAVD,sBAUYP,OAVZ,EAUqBQ,KAVrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAYqBvB,YAAY,CAACuB,KAAD,CAZjC;;AAAA;AAYSN,cAAAA,GAZT;AAaGF,cAAAA,OAAO,CAACG,MAAR,CAAe,UAAf,EAA2BD,GAAG,CAACE,IAA/B;AAbH,gDAcUF,GAdV;;AAAA;AAAA;AAAA;AAgBGG,cAAAA,OAAO,CAACC,GAAR;;AAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMG,IAAAA,UA/BD,sBA+BYT,OA/BZ,EA+BqBU,QA/BrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAiCqB3B,aAAa,CAAC2B,QAAD,CAjClC;;AAAA;AAiCSR,cAAAA,GAjCT;AAkCGF,cAAAA,OAAO,CAACG,MAAR,CAAe,UAAf,EAA2BD,GAAG,CAACE,IAA/B;AAlCH,gDAmCUF,GAnCV;;AAAA;AAAA;AAAA;AAqCGG,cAAAA,OAAO,CAACC,GAAR;;AArCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlCuB,CAAf,CAAd","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport { fetchListItem, fetchUserInfo, fetchAskItem } from '../api/index.js';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n    state: { // 데이터 저장하는 일\n        user: [],\n        item: {},\n        list:[]\n    },\n    getters: { // 각 페이지에서 함수로 호출해 가져갈 수 있도록 진열해 둠\n        // news(state) {\n        //     return state.news;\n        // },\n        // ask(state) {\n        //     return state.ask;\n        // },\n        // jobs(state) {\n        //     return state.jobs;\n        // },\n        // user(state) {\n        //     return state.user;\n        // },\n        // item(state) {\n        //     return state.item;\n        // }\n    },\n    mutations: { // state에 저장\n        SET_USER(state, user) {\n            state.user = user;\n        },\n        SET_ITEM(state, item) {\n            state.item = item; \n        },\n        SET_LIST(state, list) {\n            state.list = list\n        }\n    },\n    actions: { // api/index.js에 데이터 가져오는 행동대장들을 호출해서 받고, 뮤테이션에 넘김\n        async FETCH_USER(context, userName) {\n            try {\n                const res = await fetchUserInfo(userName);\n                context.commit('SET_USER', res.data);\n                return res; // 리턴을 해줘야 다음일을 한다? 어떤값을 리턴하더라도 promise가 리턴된다?\n            } catch (err) {\n                console.log(err);\n            }\n        },\n        async FETCH_ITEM(context, askId) {\n            try {\n                const res = await fetchAskItem(askId);\n                context.commit('SET_ITEM', res.data);\n                return res;\n            } catch (err) {\n                console.log(err);\n            }\n        },\n        // promise 방식\n        // FETCH_LIST(context, pageName) {\n        //     return fetchListItem(pageName)\n        //         .then(res => {\n        //             context.commit('SET_LIST', res.data);\n        //             console.log(4);\n        //             return res;\n        //         })\n        //         .catch(err => {\n        //             console.log(err);\n        //         })\n        // },\n        async FETCH_LIST(context, pageName) {\n            try {\n                const res = await fetchListItem(pageName);\n                context.commit('SET_LIST', res.data);\n                return res;\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    }\n})"]}]}